{"version":3,"sources":["index.ts"],"names":["Object","defineProperty","exports","value","isOpen","myName","myAge","list","me","Job","job","WebDev","phone","tablet","homes","sayName","_a","name","age","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,SAAS,KAAb;AACA,IAAIC,SAAS,OAAb;AACA,IAAIC,QAAQ,EAAZ;AACA,IAAIC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX;AACA;AACA,IAAIC,KAAK,CAAC,MAAD,EAAS,EAAT,EAAa,KAAb,CAAT;AACA;AACA,IAAIC,GAAJ;AACA,CAAC,UAAUA,GAAV,EAAe;AACZA,QAAIA,IAAI,QAAJ,IAAgB,CAApB,IAAyB,QAAzB;AACAA,QAAIA,IAAI,aAAJ,IAAqB,CAAzB,IAA8B,aAA9B;AACAA,QAAIA,IAAI,IAAJ,IAAY,CAAhB,IAAqB,IAArB;AACH,CAJD,EAIGA,QAAQA,MAAM,EAAd,CAJH;AAKA,IAAIC,MAAMD,IAAIE,MAAd;AACA;AACA,IAAIC,QAAQ,OAAZ;AACA,IAAIC,SAAS,CAAb;AACA;AACA;AACA,IAAIC,QAAQ,CAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,SAAVA,OAAU,CAAUC,EAAV,EAAc;AACxB,QAAIC,OAAOD,GAAGC,IAAd;AAAA,QAAoBC,MAAMF,GAAGE,GAA7B;AACAC,YAAQC,GAAR,CAAYH,IAAZ;AACA,WAAOA,IAAP;AACH,CAJD;AAKA;AACA;AACA;AACA;AACAF,QAAQ;AACJE,UAAM,MADF;AAEJC,SAAK;AAFD,CAAR;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"typescript-intro.4158dab9.map","sourceRoot":"..","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isOpen = false;\nvar myName = 'Scott';\nvar myAge = 32;\nvar list = [0, 1, 2];\n// tuple:\nvar me = ['Mike', 32, false];\n// enum:\nvar Job;\n(function (Job) {\n    Job[Job[\"WebDev\"] = 0] = \"WebDev\";\n    Job[Job[\"WebDesigner\"] = 1] = \"WebDesigner\";\n    Job[Job[\"PM\"] = 2] = \"PM\";\n})(Job || (Job = {}));\nvar job = Job.WebDev;\n// any\nvar phone = 'Pixel';\nvar tablet = 3;\n// never\n// const homes: never = 3;\nvar homes = 3;\n// Functions in TypeScript\n// 1)\n// const sayWord = (word: string): string => {\n//   console.log(word);\n//   return word;\n// };\n// sayWord('Mike');\n// 2)\n// add \"?\" to set parameter as optional\n// const sayWord = (word?: string): string => {\n//   console.log(word || 'Hello');\n//   return word || 'Hello';\n// };\n// sayWord();\n//3)\n// you can also set a default value\n// in that case you don't have to specify the type\n// const sayWord = (word = 'Hello'): string => {\n//   console.log(word);\n//   return word;\n// };\n// sayWord();\n// 4)\n// you can also use rest parameters\n// const sayWord = (word = 'Hello', ...otherStuff: string[]): string => {\n//   console.log(otherStuff);\n//   return word;\n// };\n// sayWord('Mike', 'Lisa', 'Danny');\n// Implicit Types in TS\n// let newName = 'Mark';\n// newName = 'Johnny';\n// newName = 10;\n// console.log(newName);\n// Gets type from initial declaration\n// let newNameTwo = newName;\n// newNameTwo = 10;\n// union types (with |)\n// the type here is one of three - string, number or boolean\n// let newName: string | number | boolean = 'Mark';\n// newName = 'Johnny';\n// newName = 10;\n// newName = false;\n// console.log(newName);\n// let newNameTwo = newName;\n// newNameTwo = 39;\n// console.log(newNameTwo);\n// union types in functions\n// const makeMargin = (x: string | number): string => {\n//   return `margin: ${x}px;`;\n// };\n// makeMargin(10);\n// makeMargin('Miao');\n// makeMargin(true);\n// Null types (and undefined are automatically added to your standard types)\n// let dog: string;\n// dog = null;\n// console.log('dog', dog);\n// dog = 'Lucie';\n// dog = undefined;\n// dog = 10;\n// dog = false;\n// Interfaces\nvar sayName = function (_a) {\n    var name = _a.name, age = _a.age;\n    console.log(name);\n    return name;\n};\n// const sayName = ({ name, age }: Person): Person => {\n//   console.log(name);\n//   return { name, age };\n// };\nsayName({\n    name: 'Mike',\n    age: 32,\n});\n// sayName({\n//   age: 32,\n//   name: 'Mike',\n// });\n// sayName({\n//   name: 'Mike',\n// });\n// Enums\n// Numeric enum:\n// enum Type {\n//   Video, // 0\n//   BlogPost, // 1\n//   Quiz, // 2\n// }\n// const createContent = (contentType: Type) => {};\n// createContent(Type.Quiz);\n// createContent(0);\n// console.log(Type.Quiz);\n// String enum:\n// enum Type2 {\n//   Video = 'VIDEO',\n//   BlogPost = 'BLOG_POST',\n//   Quiz = 'QUIZ',\n// }\n// const createContent2 = (contentType: Type2) => {};\n// createContent2(Type2.Quiz);\n// createContent2('QUIZ'); // not going to work\n// console.log(Type2.Quiz);\n// Classes\n// class Team {\n//   teamName: string;\n// public teamName: string; // this is same as above\n// private teamName: string; // prevents outside usage\n// readonly teamName: string; // prevents from being changed\n//   constructor(teamName) {\n//     this.teamName = teamName;\n//   }\n//   score(): string {\n//     this.teamName = 'changing';\n//     console.log('Gooooooal!');\n//     console.log(this.teamName);\n//     return 'goal';\n//   }\n// }\n// const redWings = new Team('Red Wings');\n// redWings.score();\n// console.log(redWings.teamName);\n"]}