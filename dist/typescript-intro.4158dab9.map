{"version":3,"sources":["index.ts"],"names":["isOpen","myName","myAge","list","me","Job","job","WebDev","phone","tablet","homes","sayWord","word","otherStuff","_i","arguments","length","console","log","newName","newNameTwo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,SAAS,KAAb;AACA,IAAIC,SAAS,OAAb;AACA,IAAIC,QAAQ,EAAZ;AACA,IAAIC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX;AACA;AACA,IAAIC,KAAK,CAAC,MAAD,EAAS,EAAT,EAAa,KAAb,CAAT;AACA;AACA,IAAIC,GAAJ;AACA,CAAC,UAAUA,GAAV,EAAe;AACZA,QAAIA,IAAI,QAAJ,IAAgB,CAApB,IAAyB,QAAzB;AACAA,QAAIA,IAAI,aAAJ,IAAqB,CAAzB,IAA8B,aAA9B;AACAA,QAAIA,IAAI,IAAJ,IAAY,CAAhB,IAAqB,IAArB;AACH,CAJD,EAIGA,QAAQA,MAAM,EAAd,CAJH;AAKA,IAAIC,MAAMD,IAAIE,MAAd;AACA;AACA,IAAIC,QAAQ,OAAZ;AACA,IAAIC,SAAS,CAAb;AACA;AACA;AACA,IAAIC,QAAQ,CAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,SAAVA,OAAU,CAAUC,IAAV,EAAgB;AAC1B,QAAIA,SAAS,KAAK,CAAlB,EAAqB;AAAEA,eAAO,OAAP;AAAiB;AACxC,QAAIC,aAAa,EAAjB;AACA,SAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKC,UAAUC,MAAhC,EAAwCF,IAAxC,EAA8C;AAC1CD,mBAAWC,KAAK,CAAhB,IAAqBC,UAAUD,EAAV,CAArB;AACH;AACDG,YAAQC,GAAR,CAAYL,UAAZ;AACA,WAAOD,IAAP;AACH,CARD;AASAD,QAAQ,MAAR,EAAgB,MAAhB,EAAwB,OAAxB;AACA,IAAIQ,UAAU,MAAd;AACAA,UAAU,QAAV;AACAA,UAAU,EAAV;AACAF,QAAQC,GAAR,CAAYC,OAAZ;AACA,IAAIC,aAAaD,OAAjB;AACAC,aAAa,EAAb","file":"typescript-intro.4158dab9.map","sourceRoot":"..","sourcesContent":["var isOpen = false;\nvar myName = 'Scott';\nvar myAge = 32;\nvar list = [0, 1, 2];\n// tuple:\nvar me = ['Mike', 32, false];\n// enum:\nvar Job;\n(function (Job) {\n    Job[Job[\"WebDev\"] = 0] = \"WebDev\";\n    Job[Job[\"WebDesigner\"] = 1] = \"WebDesigner\";\n    Job[Job[\"PM\"] = 2] = \"PM\";\n})(Job || (Job = {}));\nvar job = Job.WebDev;\n// any\nvar phone = 'Pixel';\nvar tablet = 3;\n// never\n// const homes: never = 3;\nvar homes = 3;\n// Functions in TypeScript\n// 1)\n// const sayWord = (word: string): string => {\n//   console.log(word);\n//   return word;\n// };\n// sayWord('Mike');\n// 2)\n// add \"?\" to set parameter as optional\n// const sayWord = (word?: string): string => {\n//   console.log(word || 'Hello');\n//   return word || 'Hello';\n// };\n// sayWord();\n//3)\n// you can also set a default value\n// in that case you don't have to specify the type\n// const sayWord = (word = 'Hello'): string => {\n//   console.log(word);\n//   return word;\n// };\n// sayWord();\n// 4)\n// you can also use rest parameters\nvar sayWord = function (word) {\n    if (word === void 0) { word = 'Hello'; }\n    var otherStuff = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        otherStuff[_i - 1] = arguments[_i];\n    }\n    console.log(otherStuff);\n    return word;\n};\nsayWord('Mike', 'Lisa', 'Danny');\nvar newName = 'Mark';\nnewName = 'Johnny';\nnewName = 10;\nconsole.log(newName);\nvar newNameTwo = newName;\nnewNameTwo = 10;\n"]}