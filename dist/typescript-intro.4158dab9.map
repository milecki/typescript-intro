{"version":3,"sources":["index.ts"],"names":["isOpen","myName","myAge","list","me","Job","job","WebDev","phone","tablet","homes","makeMargin","x","dog","console","log","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,SAAS,KAAb;AACA,IAAIC,SAAS,OAAb;AACA,IAAIC,QAAQ,EAAZ;AACA,IAAIC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX;AACA;AACA,IAAIC,KAAK,CAAC,MAAD,EAAS,EAAT,EAAa,KAAb,CAAT;AACA;AACA,IAAIC,GAAJ;AACA,CAAC,UAAUA,GAAV,EAAe;AACZA,QAAIA,IAAI,QAAJ,IAAgB,CAApB,IAAyB,QAAzB;AACAA,QAAIA,IAAI,aAAJ,IAAqB,CAAzB,IAA8B,aAA9B;AACAA,QAAIA,IAAI,IAAJ,IAAY,CAAhB,IAAqB,IAArB;AACH,CAJD,EAIGA,QAAQA,MAAM,EAAd,CAJH;AAKA,IAAIC,MAAMD,IAAIE,MAAd;AACA;AACA,IAAIC,QAAQ,OAAZ;AACA,IAAIC,SAAS,CAAb;AACA;AACA;AACA,IAAIC,QAAQ,CAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,SAAbA,UAAa,CAAUC,CAAV,EAAa;AAC1B,WAAO,aAAaA,CAAb,GAAiB,KAAxB;AACH,CAFD;AAGAD,WAAW,EAAX;AACAA,WAAW,MAAX;AACA;AACA;AACA,IAAIE,GAAJ;AACAA,MAAM,IAAN;AACAC,QAAQC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACAA,MAAM,OAAN;AACAA,MAAMG,SAAN;AACAH,MAAM,EAAN;AACAA,MAAM,KAAN","file":"typescript-intro.4158dab9.map","sourceRoot":"..","sourcesContent":["var isOpen = false;\nvar myName = 'Scott';\nvar myAge = 32;\nvar list = [0, 1, 2];\n// tuple:\nvar me = ['Mike', 32, false];\n// enum:\nvar Job;\n(function (Job) {\n    Job[Job[\"WebDev\"] = 0] = \"WebDev\";\n    Job[Job[\"WebDesigner\"] = 1] = \"WebDesigner\";\n    Job[Job[\"PM\"] = 2] = \"PM\";\n})(Job || (Job = {}));\nvar job = Job.WebDev;\n// any\nvar phone = 'Pixel';\nvar tablet = 3;\n// never\n// const homes: never = 3;\nvar homes = 3;\n// Functions in TypeScript\n// 1)\n// const sayWord = (word: string): string => {\n//   console.log(word);\n//   return word;\n// };\n// sayWord('Mike');\n// 2)\n// add \"?\" to set parameter as optional\n// const sayWord = (word?: string): string => {\n//   console.log(word || 'Hello');\n//   return word || 'Hello';\n// };\n// sayWord();\n//3)\n// you can also set a default value\n// in that case you don't have to specify the type\n// const sayWord = (word = 'Hello'): string => {\n//   console.log(word);\n//   return word;\n// };\n// sayWord();\n// 4)\n// you can also use rest parameters\n// const sayWord = (word = 'Hello', ...otherStuff: string[]): string => {\n//   console.log(otherStuff);\n//   return word;\n// };\n// sayWord('Mike', 'Lisa', 'Danny');\n// Implicit Types in TS\n// let newName = 'Mark';\n// newName = 'Johnny';\n// newName = 10;\n// console.log(newName);\n// Gets type from initial declaration\n// let newNameTwo = newName;\n// newNameTwo = 10;\n// union types (with |)\n// the type here is one of three - string, number or boolean\n// let newName: string | number | boolean = 'Mark';\n// newName = 'Johnny';\n// newName = 10;\n// newName = false;\n// console.log(newName);\n// let newNameTwo = newName;\n// newNameTwo = 39;\n// console.log(newNameTwo);\n// union types in functions\nvar makeMargin = function (x) {\n    return \"margin: \" + x + \"px;\";\n};\nmakeMargin(10);\nmakeMargin('Miao');\n// makeMargin(true);\n// Null types (and undefined are automatically added to your standard types)\nvar dog;\ndog = null;\nconsole.log('dog', dog);\ndog = 'Lucie';\ndog = undefined;\ndog = 10;\ndog = false;\n"]}